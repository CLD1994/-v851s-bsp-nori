From 257dd982e57ff6337e8e7b4482e58a4db413c6a4 Mon Sep 17 00:00:00 2001
From: CLD <cld.username@gmail.com>
Date: Fri, 19 Jul 2024 12:10:40 +0000
Subject: [PATCH] nori st7789v

Change-Id: Ia465272e8c598fe14c6d31e6fb438081c2ede4ae
---
 drivers/staging/fbtft/fb_st7789v.c | 154 ++++++++++++++++++++++++++---
 1 file changed, 143 insertions(+), 11 deletions(-)

diff --git a/drivers/staging/fbtft/fb_st7789v.c b/drivers/staging/fbtft/fb_st7789v.c
index 085e9872..f56c605b 100644
--- a/drivers/staging/fbtft/fb_st7789v.c
+++ b/drivers/staging/fbtft/fb_st7789v.c
@@ -16,9 +16,13 @@
 
 #include <linux/bitops.h>
 #include <linux/delay.h>
+#include <linux/gpio/consumer.h>
 #include <linux/init.h>
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/completion.h>
 #include <video/mipi_display.h>
 
 #include "fbtft.h"
@@ -29,6 +33,10 @@
 	"70 2C 2E 15 10 09 48 33 53 0B 19 18 20 25\n" \
 	"70 2C 2E 15 10 09 48 33 53 0B 19 18 20 25"
 
+#define HSD20_IPS_GAMMA \
+	"D0 05 0A 09 08 05 2E 44 45 0F 17 16 2B 33\n" \
+	"D0 05 0A 09 08 05 2E 43 45 0F 16 16 2B 33"
+
 /**
  * enum st7789v_command - ST7789V display controller commands
  *
@@ -52,16 +60,34 @@
  * out as well to avoid duplicate entries.
  */
 enum st7789v_command {
+	// Porch Setting
 	PORCTRL = 0xB2,
+	// Gate Control.
 	GCTRL = 0xB7,
+	// VCOM Setting
 	VCOMS = 0xBB,
+	// LCM Control
+	LCMCTRL = 0xC0,
+	// VDV and VRH Command Enable
 	VDVVRHEN = 0xC2,
+	// VRH Set
 	VRHS = 0xC3,
+	// VDV Set
 	VDVS = 0xC4,
+	// VCOM Offset Set
 	VCMOFSET = 0xC5,
+	// Frame Rate Control in Normal Mode
+	FRCTRL2 = 0xC6,
+	// Power Control 1
 	PWCTRL1 = 0xD0,
+	// Positive Voltage Gamma Control
 	PVGAMCTRL = 0xE0,
+	// Negative Voltage Gamma Control
 	NVGAMCTRL = 0xE1,
+	// Gate Control
+	GATECTRL = 0xE4,
+	// Tearing Effect Line On
+	TEON = 0x35,
 };
 
 #define MADCTL_BGR BIT(3) /* bitmask for RGB/BGR order */
@@ -69,6 +95,54 @@ enum st7789v_command {
 #define MADCTL_MX BIT(6) /* bitmask for column address order */
 #define MADCTL_MY BIT(7) /* bitmask for page address order */
 
+// /* 60Hz for 16.6ms, configured as 2*16.6ms */
+#define PANEL_TE_TIMEOUT_MS  33
+
+static int (*origin_write_vmem)(struct fbtft_par *par, size_t offset, size_t len) = NULL;
+
+static struct completion panel_te; /* completion for panel TE line */
+static int irq_te = 0; /* Linux IRQ for LCD TE line */
+
+static irqreturn_t panel_te_handler(int irq, void *data)
+{
+	complete(&panel_te);
+	return IRQ_HANDLED;
+}
+
+/*
+ * init_tearing_effect_line() - init tearing effect line.
+ * @par: FBTFT parameter object.
+ *
+ * Return: 0 on success, or a negative error code otherwise.
+ */
+static int init_tearing_effect_line(struct fbtft_par *par)
+{
+	struct device *dev = par->info->device;
+
+	irq_te = gpio_to_irq(par->gpio.wr);
+
+	if (irq_te < 0) {
+		dev_err(dev, "TE gpio to irq failed.\n");
+		return irq_te;
+	}
+
+
+	/* The effective state is high and lasts no more than 1000 microseconds */
+	int ret = devm_request_irq(dev, irq_te, panel_te_handler,
+			      IRQF_TRIGGER_RISING, "TE_GPIO", par);
+
+	if (IS_ERR_VALUE(ret)) {
+		dev_err(dev, "TE IRQ request failed.\n");
+		return ret;
+	}
+
+	disable_irq_nosync(irq_te);
+
+	init_completion(&panel_te);
+
+	return 0;
+}
+
 /**
  * init_display() - initialize the display controller
  *
@@ -85,38 +159,60 @@ enum st7789v_command {
  */
 static int init_display(struct fbtft_par *par)
 {
+	init_tearing_effect_line(par);
+
+	switch (par->pdata->display.buswidth) {
+		case 8:
+			origin_write_vmem = &fbtft_write_vmem16_bus8;
+			break;
+		case 9:
+			origin_write_vmem = &fbtft_write_vmem16_bus9;
+			break;
+		case 16:
+			origin_write_vmem = &fbtft_write_vmem16_bus16;
+			break;
+		default:
+			origin_write_vmem = &fbtft_write_vmem16_bus8;
+	}
+
+	par->fbtftops.reset(par);
+
 	/* turn off sleep mode */
-	write_reg(par, MIPI_DCS_EXIT_SLEEP_MODE);
+    write_reg(par, MIPI_DCS_EXIT_SLEEP_MODE);
 	mdelay(120);
 
 	/* set pixel format to RGB-565 */
-	write_reg(par, MIPI_DCS_SET_PIXEL_FORMAT, MIPI_DCS_PIXEL_FMT_16BIT);
+    write_reg(par, MIPI_DCS_SET_PIXEL_FORMAT, MIPI_DCS_PIXEL_FMT_16BIT);
+
+    write_reg(par, MIPI_DCS_SET_ADDRESS_MODE, 0x00);
 
-	write_reg(par, PORCTRL, 0x08, 0x08, 0x00, 0x22, 0x22);
+    write_reg(par, PORCTRL, 0x0C, 0x0C, 0x00, 0x33, 0x33);
+    // write_reg(par, PORCTRL,0x1F,0x1F,0x00,0x33,0x33);
 
 	/*
 	 * VGH = 13.26V
 	 * VGL = -10.43V
 	 */
-	write_reg(par, GCTRL, 0x35);
+    write_reg(par, GCTRL, 0x35);
 
 	/*
 	 * VDV and VRH register values come from command write
 	 * (instead of NVM)
 	 */
-	write_reg(par, VDVVRHEN, 0x01, 0xFF);
+	write_reg(par, VDVVRHEN, 0x01);
 
 	/*
 	 * VAP =  4.1V + (VCOM + VCOM offset + 0.5 * VDV)
 	 * VAN = -4.1V + (VCOM + VCOM offset + 0.5 * VDV)
 	 */
-	write_reg(par, VRHS, 0x0B);
+	write_reg(par, VRHS, 0x15); //GVDD=4.8V  颜色深度
+    // write_reg(par, VRHS, 0x01);
 
 	/* VDV = 0V */
 	write_reg(par, VDVS, 0x20);
 
-	/* VCOM = 0.9V */
-	write_reg(par, VCOMS, 0x20);
+	/* VCOM = 1.35V */
+    write_reg(par, VCOMS, 0x32);
 
 	/* VCOM offset = 0V */
 	write_reg(par, VCMOFSET, 0x20);
@@ -125,10 +221,21 @@ static int init_display(struct fbtft_par *par)
 	 * AVDD = 6.8V
 	 * AVCL = -4.8V
 	 * VDS = 2.3V
-	 */
+     */
 	write_reg(par, PWCTRL1, 0xA4, 0xA1);
 
-	write_reg(par, MIPI_DCS_SET_DISPLAY_ON);
+    // write_reg(par, LCMCTRL, 0x2C);
+    write_reg(par, FRCTRL2, 0x0F); //0x0F:60Hz
+    write_reg(par, PVGAMCTRL, 0xD0,0x08,0x0E,0x09,0x09,0x05,0x31,0x33,0x48,0x17,0x14,0x15,0x31,0x34);
+    write_reg(par, NVGAMCTRL, 0xD0,0x08,0x0E,0x09,0x09,0x15,0x31,0x33,0x48,0x17,0x14,0x15,0x31,0x34);
+    // write_reg(par, GATECTRL, 0x1D,0x00,0x00);
+	write_reg(par, MIPI_DCS_ENTER_INVERT_MODE);
+
+	if (irq_te) {
+		write_reg(par, MIPI_DCS_SET_TEAR_ON, 0x00);
+	}
+
+    write_reg(par, MIPI_DCS_SET_DISPLAY_ON);
 	return 0;
 }
 
@@ -238,18 +345,43 @@ static int blank(struct fbtft_par *par, bool on)
 	return 0;
 }
 
+/*
+ * write_vmem() - write data to display.
+ * @par: FBTFT parameter object.
+ * @offset: offset from screen_buffer.
+ * @len: the length of data to be writte.
+ *
+ * Return: 0 on success, or a negative error code otherwise.
+ */
+static int write_vmem(struct fbtft_par *par, size_t offset, size_t len)
+{
+	struct device *dev = par->info->device;
+	if (irq_te) {
+		enable_irq(irq_te);
+		reinit_completion(&panel_te);
+		int ret = wait_for_completion_timeout(&panel_te, msecs_to_jiffies(PANEL_TE_TIMEOUT_MS));
+		if (ret == 0) {
+			dev_err(dev, "wait panel TE timeout\n");
+		}
+		disable_irq(irq_te);
+	}
+
+	return origin_write_vmem(par, offset, len);
+}
+
 static struct fbtft_display display = {
 	.regwidth = 8,
 	.width = 240,
 	.height = 320,
 	.gamma_num = 2,
 	.gamma_len = 14,
-	.gamma = DEFAULT_GAMMA,
+	.gamma = HSD20_IPS_GAMMA,
 	.fbtftops = {
 		.init_display = init_display,
 		.set_var = set_var,
 		.set_gamma = set_gamma,
 		.blank = blank,
+		.write_vmem = write_vmem,
 	},
 };
 
-- 
2.25.1

